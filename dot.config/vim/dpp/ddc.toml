[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']
on_event = ['BufEnter']
hook_source = '''
let s:sources_list = [
\   'around',
\   'denippet',
\   'file',
\   'lsp',
\   'skkeleton',
\ ]

call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('sources', s:sources_list)
call ddc#custom#patch_global('sourceOptions', #{
\   _: #{
\     matchers: ['matcher_head'],
\     sorters: ['sorter_rank'],
\     converters: ['converter_remove_overlap'],
\   },
\ })
call ddc#custom#patch_global('sourceOptions', #{
\   around: #{
\     mark: 'around',
\   },
\ })
call ddc#custom#patch_global('sourceOptions', #{
\   denippet: #{
\     mark: 'denippet',
\   },
\ })
call ddc#custom#patch_global('sourceOptions', #{
\   skkeleton: #{
\     mark: 'skk',
\     matchers: [],
\     sorters: [],
\     converters: [],
\     isVolatile: v:true,
\     minAutoCompleteLength: 1,
\   },
\ })
call ddc#custom#patch_global('sourceOptions', {
\   'file': {
\     'mark': 'F',
\     'isVolatile': v:true,
\     'forceCompletionPattern': '\S/\S*',
\ }})
call ddc#custom#patch_filetype(
\   ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
\     'file': {
\   'sourceOptions': {
\       'forceCompletionPattern': '\S\\\S*',
\     },
\   },
\   'sourceParams': {
\     'file': {
\       'mode': 'win32',
\     },
\ }})
call ddc#custom#patch_global('sourceOptions', #{
\   lsp: #{
\     mark: 'lsp',
\     forceCompletionPattern: '\.\w*|:\w*|->\w*',
\   },
\ })
call ddc#custom#patch_global('sourceParams', #{
\   lsp: #{
\     snippetEngine: denops#callback#register({
\       body -> denippet#anonymous(body)
\     }),
\     enableResolveItem: v:true,
\     enableAdditionalTextEdit: v:true,
\   }
\ })
if has('nvim')
"   call ddc#custom#patch_global('sourceParams', #{
"   \   lsp: #{
"   \     lspEngine: 'nvim-lsp',
"   \   }
"   \ })
else
  call ddc#custom#patch_global('sourceParams', #{
  \   lsp: #{
  \     lspEngine: 'vim-lsp',
  \   }
  \ })
endif
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = ['ddc.vim']
hook_source = '''
inoremap <C-n> <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p> <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y> <Cmd>call pum#map#confirm()<CR>
inoremap <C-e> <Cmd>call pum#map#cancel()<CR>
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
on_source = ['ddc.vim']
# [記号入力 - SKK辞書Wiki](http://openlab.ring.gr.jp/skk/wiki/wiki.cgi?page=%B5%AD%B9%E6%C6%FE%CE%CF)
hook_source = '''
let s:skk_dev_path = '~/ghq/github.com/skk-dev/dict'->expand()
let s:skk_emoji_path = '~/ghq/github.com/uasi/skk-emoji-jisyo'->expand()
let s:dict_path = $XDG_CONFIG_HOME->expand() .. '/skk/mydict.utf8'
call skkeleton#config({
\   'globalDictionaries': [
\     s:skk_dev_path .. '/SKK-JISYO.L',
\     s:skk_dev_path .. '/SKK-JISYO.jinmei',
\     s:skk_emoji_path .. '/SKK-JISYO.emoji.utf8',
\   ],
\   'immediatelyDictionaryRW': v:false,
\   'userDictionary': s:dict_path,
\ })
call skkeleton#register_keymap('input', ';', 'henkanPoint')
imap <C-k> <Plug>(skkeleton-enable)
cmap <C-k> <Plug>(skkeleton-enable)
'''

[[plugins]]
repo = 'uga-rosa/denippet.vim'
on_source = ['ddc.vim']
hook_source = '''
let s:dir = $XDG_CONFIG_HOME->expand() .. '/vim/snippet/'
for s:file in glob(s:dir . '*.*', 1, 1)
  call denippet#load(s:file)
endfor
'''

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = ['ddc.vim']
