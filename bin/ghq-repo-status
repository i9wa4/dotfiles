#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
set -o posix

# 並列処理数の設定（必要に応じて変更可能）
PARALLEL_JOBS=1

# ghqのルートパスをスクリプト開始時に一度だけ取得
GHQ_ROOT_RAW=$(ghq root 2>/dev/null)
if [[ -z $GHQ_ROOT_RAW ]]; then
  echo "Error: Could not determine ghq root. Make sure ghq is installed and configured." >&2
  exit 1
fi
# ghq rootのパスの末尾にスラッシュがない場合は追加（後のパス操作のため）
GHQ_ROOT="$GHQ_ROOT_RAW"
[[ $GHQ_ROOT != */ ]] && GHQ_ROOT="$GHQ_ROOT/"

# 最適化された各リポジトリの情報を取得して表示する関数
get_repo_status_info() {
  local repo_full_path="$1"

  # フルパスから 'org/repo' または 'user/repo' 形式の短いリポジトリ名を生成
  local repo_rel_to_ghq_root="${repo_full_path#$GHQ_ROOT}"
  local repo_short_name="${repo_rel_to_ghq_root#*/}"

  # git status --porcelain=v1 で全ての情報を一度に取得
  local git_status_output
  git_status_output=$(git -C "$repo_full_path" status --porcelain=v1 2>/dev/null)

  # ブランチ名を効率的に取得
  local branch_name
  branch_name=$(git -C "$repo_full_path" symbolic-ref --short HEAD 2>/dev/null)
  if [[ -z $branch_name ]]; then
    # デタッチドHEADの場合のフォールバック（簡略化）
    branch_name=$(git -C "$repo_full_path" describe --tags --exact-match HEAD 2>/dev/null \
      || git -C "$repo_full_path" rev-parse --short HEAD 2>/dev/null \
      || echo "-")
  fi

  local status_parts=()

  # git status の出力を解析して統計を一度に計算
  local untracked_count=0
  local modified_count=0

  while IFS= read -r line; do
    if [[ $line =~ ^\?\? ]]; then
      ((untracked_count++))
    elif [[ $line =~ ^[[:space:]]M ]]; then
      ((modified_count++))
    fi
  done <<<"$git_status_output"

  # 統計情報の組み立て
  if [[ $untracked_count -gt 0 ]]; then
    status_parts+=("?${untracked_count}")
  fi
  if [[ $modified_count -gt 0 ]]; then
    status_parts+=("~${modified_count}")
  fi

  # 必要な場合のみ diff --shortstat を実行
  if [[ $modified_count -gt 0 ]]; then
    local shortstat
    shortstat=$(git -C "$repo_full_path" diff --shortstat 2>/dev/null)

    local insertions=0 deletions=0
    if [[ $shortstat =~ ([0-9]+)\ insertion ]]; then
      insertions="${BASH_REMATCH[1]}"
    fi
    if [[ $shortstat =~ ([0-9]+)\ deletion ]]; then
      deletions="${BASH_REMATCH[1]}"
    fi

    if [[ $insertions -gt 0 ]]; then
      status_parts+=("+${insertions}")
    fi
    if [[ $deletions -gt 0 ]]; then
      status_parts+=("-${deletions}")
    fi
  fi

  # 出力行を組み立てる
  local output_line
  output_line=$(printf "%-${MAX_WIDTH}s (%s)" "$repo_short_name" "$branch_name")

  if [[ ${#status_parts[@]} -gt 0 ]]; then
    local joined_status="${status_parts[*]}"
    output_line+=" $joined_status"
  fi

  echo "$output_line"
}

# Git リポジトリかどうかを判定する関数
is_git_repository() {
  local repo_path="$1"

  # .git がディレクトリの場合（通常のリポジトリまたは main worktree）
  if [[ -d "$repo_path/.git" ]]; then
    return 0
  fi

  # .git がファイルの場合（git worktree の linked worktree）
  if [[ -f "$repo_path/.git" ]]; then
    return 0
  fi

  return 1
}

# 並列処理用の関数
process_single_repo() {
  local repo_path="$1"
  if is_git_repository "$repo_path"; then
    get_repo_status_info "$repo_path" 2>/dev/null || {
      echo "Warning: Failed to process repository '$repo_path'" >&2
    }
  fi
}

# リポジトリ名の最大幅を動的に取得
MAX_WIDTH=$(ghq list | awk -F/ '{print $(NF-1)"/"$NF}' | wc -L)

# 関数をexportして並列処理で使えるようにする
export -f process_single_repo
export -f get_repo_status_info
export -f is_git_repository
export GHQ_ROOT
export MAX_WIDTH

# 並列処理でのメインループ

# 一時ファイルを使用して結果を収集
TEMP_OUTPUT=$(mktemp)
trap "rm -f '$TEMP_OUTPUT'" EXIT

# 並列処理で各リポジトリを処理
ghq list -p | xargs -I {} -P "$PARALLEL_JOBS" bash -c 'process_single_repo "$@"' _ {} >"$TEMP_OUTPUT"

# 結果をソートして出力（リポジトリ名でソート）
sort "$TEMP_OUTPUT"
